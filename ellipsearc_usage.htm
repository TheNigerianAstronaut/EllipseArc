<html>
<!doctype html public "-//W3C//DTD HTML 3.2 Final//EN">
<head>
	<title>EllipseArc Usage</title>
	<meta name="author" content="Austin Ekwebelam">
	<meta name="author_email" content="aekwebelam@gmail.com">
	<meta name="description" content="How to use EllipseArc">

	<link rel=stylesheet type="text/css" href="./css/doco.css">
</head>
<body>


<div class="pagenav">
<a href="about_ellipsearc.htm"><strong>Prev:</strong> About EllipseArc</a>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<strong>Usage</strong>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<a href="ellipsearc_samples.htm"><strong>Next:</strong> EllipseArc Samples</a>
</div>

<h1>
	<a name="ellipsearc_usage"></a>
	EllipseArc Usage
	<a href="#ellipsearc_usage" class="section_anchor"></a>
</h1>

There are 2 ways of using EllipseArc:

<ol>
	<li>
		<strong>Method 1 - Calling the IMAGE_ELLIPSEARC_wrapper() function:</strong>

<pre class="prettyprint">
&lt;?php
    require_once &#x27;EllipseArc.php&#x27;;

    IMAGE_ELLIPSEARC_wrapper( <a href="#ellipsearc_arguments">&lt;arguments&gt;</a> );
?&gt;
</pre>

		IMAGE_ELLIPSEARC_wrapper() is a wrapper function that allows EllipseArc to be used as a close substitute for imagearc, imagefilledarc, imageellipse and imagefilledellipse. The EllipseArc object is immediately deleted after the shape is drawn, thereby saving memory.
		<br>
		<br>
	</li>
	<li>
		<strong>Method 2 - Accessing the Image_EllipseArc() class directly:</strong>

<pre class="prettyprint">
&lt;?php
    require_once &#x27;EllipseArc.php&#x27;;

    $myobject = Image_EllipseArc( <a href="#ellipsearc_arguments">&lt;arguments&gt;</a> );
?&gt;
</pre>

		This method retains the object in memory after it has been drawn. Hence you can run the reportStatus() function on it in case you want to investigate what error codes EllipseArc detected when trying to draw the shape.
		<br>
		<br>
<pre class="prettyprint">
&lt;?php
    $myobject-&gt;reportStatus();
?&gt;
</pre>
	</li>
</ol>

You can mix both methods in the same file:
<pre class="prettyprint">
&lt;?php
    require_once &#x27;EllipseArc.php&#x27;;

    IMAGE_ELLIPSEARC_wrapper( &lt;arguments for shape 1&gt; );
    $myobject02 = Image_EllipseArc( &lt;arguments for $myobject02&gt; );
    $myobject03 = Image_EllipseArc( &lt;arguments for $myobject03&gt; );
    IMAGE_ELLIPSEARC_wrapper( &lt;arguments for shape 4&gt; );

    $myreport02 = $myobject02-&gt;reportStatus();

    unset($myobject02);
    unset($myobject03);
?&gt;
</pre>

<h2>
	<a name="ellipsearc_arguments"></a>
	EllipseArc arguments
	<a href="#ellipsearc_arguments" class="section_anchor"></a>
</h2>

EllipseArc's <strong>IMAGE_ELLIPSEARC_wrapper()</strong> function and <strong>Image_EllipseArc()</strong> class both take exactly the same arguments in the following format:
<pre class="prettyprint">
(
    image_id,         // <strong>resource</strong>: the image resource generated by imagecreatetruecolor
    centre_x,         // <strong>int</strong>: the x co-ordinate of the shape&#x27;s centre.
    centre_y,         // <strong>int</strong>: the y co-ordinate of the shape&#x27;s centre.
    width,            // <strong>int</strong>: full width of the unrotated ellipse that makes up the shape
    height,           // <strong>int</strong>: full height of the unrotated ellipse that makes up the shape
    start_angle,      // <strong>float</strong>: the starting point of the desired shape before rotations
    end_angle,        // <strong>float</strong>: the ending point of the desired shape before rotations
    color,            // <strong>resource</strong>: the color resource generated by imagecolorallocate or imagecolorallocatealpha
    shape,            // <strong>string</strong>: the name of the desired EllipseArc shape, including any modifiers
    alpha_angle,      // <strong>int</strong>: the desired rotation angle for the shape (anti-clockwise using Cartesian coordinates)
    width_thickness,  // <strong>int</strong> or <strong>string</strong>:  the internal thickness of the shape.
                      // The string must be quoted and contain two numbers separated by a forward slash
    height_thickness  // <strong>int</strong>: Optional.  the height thickness of the shape.
);
</pre>

For example, if a desired shape has the following properties:
<ul>
	<li>
		centred at (123,456) in the parent $image object
	</li>
	<li>
		before rotation, the full width of the parent ellipse was 400 pixels
	</li>
	<li>
		before rotation, the full height of the parent ellipse was 320 pixels
	</li>
	<li>
		before rotation, the starting angle was at 15 degrees
	</li>
	<li>
		before rotation, the ending angle was at 210 degrees
	</li>
	<li>
		the colour is $blue = imagecolorallocate($image, 0x00, 0x00, 0xff)
	</li>
	<li>
		an <strong>arc</strong> is desired
	</li>
	<li>
		the rotation angle is 60 degrees anti-clockwise
	</li>
	<li>
		the width thickness is 48 pixels
	</li>
	<li>
		the desired thickness is uniform, so in this case the height_thickness will be skipped
	</li>
	<li>
		the shape should be filled.  Hence the width thickness (and height_thickness, if it had been provided) should be supplied
		as positive numbers
	</li>
</ul>

The parameters for the shape would look like this:

<pre class="prettyprint">
&lt;?php

    //
    // The shape below will be FILLED because the width_thickness is a positive number
    //

    $myshape_a_filled = new Image_EllipseArc($image, 123, 456, 400, 320, 15, 210, $blue, &#x27;arc&#x27;, 60, 48);

    //
    // The shape below will be UNFILLED because the width_thickness is a negative number
    //

    $myshape_a_unfilled = new Image_EllipseArc($image, 123, 456, 400, 320, 15, 210, $blue, &#x27;arc&#x27;, 60, -48);
?&gt;
</pre>

If we had wanted the height to have a thickness of "17" instead of the uniform thickness of 48 all round, the parameters
would have been either of the two options below:
<pre class="prettyprint">
&lt;?php
    //
    // Both $myshape_b and $myshape_c would produce exactly the same shape.
    // In $my_shape_b, the width and height thicknesses were specified as two separate parameters.
    // In $my_shape_c, the width and height thicknesses were specified as a quoted string
    //

    $myshape_b = new Image_EllipseArc($image, 123, 456, 400, 320, 15, 210, $blue, &#x27;arc&#x27;, 60, 48, 17);

    $myshape_c = new Image_EllipseArc($image, 123, 456, 400, 320, 15, 210, $blue, &#x27;arc&#x27;, 60, &quot;48/17&quot;);


    //
    // Below are the UNFILLED equivalents of $myshape_b and $myshape_c.
    // Note that in each case BOTH the width_thickness AND height_thickness parameters are negative.
    //

    $myshape_b_unfilled = new Image_EllipseArc($image, 123, 456, 400, 320, 15, 210, $blue, &#x27;arc&#x27;, 60, -48, -17);

    $myshape_c_unfilled = new Image_EllipseArc($image, 123, 456, 400, 320, 15, 210, $blue, &#x27;arc&#x27;, 60, &quot;-48/-17&quot;);
?&gt;
</pre>

NOTES:
<ul>
	<li>
		If you choose to use the quoted string technique when specifying the width/height thicknesses, you must remember to supply the enclosing double-quote characters.
		Otherwise PHP will treat it as a fractional number (eg <strong>48/17</strong> will be converted into <strong>2.8235</strong> which then
		rounds down to <strong>2</strong>)
	</li>
	<li>
		A shape will only be outlined (unfilled) if BOTH the width_thickness AND height_thickness parameters are negative.
		If either of them is zero or positive then the shape will be filled.
	</li>
</ul>


<h2>
	<a name="ellipsearc_shapes_and_modifiers"></a>
	EllipseArc Shapes And Modifiers
	<a href="#ellipsearc_shapes_and_modifiers" class="section_anchor"></a>
</h2>


<h3>
	<a name="ellipsearc_shapes"></a>
	EllipseArc Shapes
	<a href="#ellipsearc_shapes" class="section_anchor"></a>
</h3>

The <strong>shape</strong> argument can be any of the text strings in the "Shape" column below.  For each row, the bold entry
indicates the "formal" name of the shape while the other entries are aliases.  EllipseArc internally converts all the aliases
to the formal names.

<table border="1">
	<tr>
		<th>
			Base Shape
		</th>
		<th>
			Examples
		</th>
	</tr>
	<tr>
		<td>
			<a name="arc"></a>
			<strong>arc</strong><br>
			<a href="#arc" class="section_anchor"></a>
		</td>
		<td>
			<img src="./images/arc_samples.png">
		</td>
	</tr>
	<tr>
		<td>
			<a name="arcchord"></a>
			<strong>arcchord</strong><br>
			<a href="#arcchord" class="section_anchor"></a>
			arcc<br>
			chord<br>
		</td>
		<td>
			<img src="./images/arcchord_samples.png">
		</td>
	</tr>
	<tr>
		<td>
			<a name="arcsegment"></a>
			<strong>arcsegment</strong><br>
			<a href="#arcsegment" class="section_anchor"></a>
			arcs<br>
			pie<br>
			pieslice<br>
			segment<br>
		</td>
		<td>
			<img src="./images/arcsegment_samples.png">
		</td>
	</tr>
	<tr>
		<td>
			<a name="arctruechord"></a>
			<strong>arctruechord</strong><br>
			<a href="#arctruechord" class="section_anchor"></a>
			arct<br>
			arctchord<br>
			tchord<br>
			truechord<br>
		</td>
		<td>
			<img src="./images/arctruechord_samples.png">
		</td>
	</tr>
	<tr>
		<td>
			<a name="circle"></a>
			<strong>circle</strong><br>
			<a href="#circle" class="section_anchor"></a>
		</td>
		<td>
			<img src="./images/circle_samples.png">
		</td>
	</tr>
	<tr>
		<td>
			<a name="ellipse"></a>
			<strong>ellipse</strong><br>
			<a href="#ellipse" class="section_anchor"></a>
		</td>
		<td>
			<img src="./images/ellipse_samples.png">
		</td>
	</tr>
</table>


<h3>
	<a name="ellipsearc_modifiers"></a>
	EllipseArc Modifiers
	<a href="#ellipsearc_modifiers" class="section_anchor"></a>
</h3>

EllipseArc's modifiers make it easier to draw certain shapes.  The following modifiers are currently supported:

<table border="1">
	<tr>
		<th>
			Modifier
		</th>
		<th>
			Description
		</th>
	</tr>
	<tr>
		<td>
			<a name="comp"></a>
			<strong>comp</strong><br>
			<a href="#comp" class="section_anchor"></a>
		</td>
		<td>
			"Complement" - Draws the complement (or opposite side) of the original shape.
			The same effect can be achieved by swapping the start_angle and end_angle of the shape.
		</td>
	</tr>
	<tr>
		<td>
			<a name="fliph"></a>
			<strong>fliph</strong><br>
			<a href="#fliph" class="section_anchor"></a>
		</td>
		<td>
			"Flip Horizontal" - Flips the original shape horizontally around its y-axis.
		</td>
	</tr>
	<tr>
		<td>
			<a name="flipv"></a>
			<strong>flipv</strong><br>
			<a href="#flipv" class="section_anchor"></a>
		</td>
		<td>
			"Flip Vertical" - Flips the original shape vertically around its x-axis.
		</td>
	</tr>
	<tr>
		<td>
			<a name="smooth"></a>
			<strong>smooth</strong><br>
			<a href="#smooth" class="section_anchor"></a>
			</td>
		<td>
			trims the top and bottom edges of the shape.  It is similar to the <strong>trim</strong> modifier but it is milder: it only
			removes vertical pixels if it calculates that the pixel will indeed be on its own.  It operates on the inner and outer arcs
			that make up the shape, but it currently does not check for lone horizontal pixels.
			<br>
			The downside to this modifier is that it does not check for lone horizontal pixels (as of this version).
		</td>
	</tr>
	<tr>
		<td>
			<a name="trim"></a>
			<strong>trim</strong><br>
			<a href="#trim" class="section_anchor"></a>
		</td>
		<td>
			trims the top, bottom, left and right edges of the shape.  It is useful when you want to remove the pointy pixels that
			stand out in the shape.  It operates on the inner and outer arcs that make up the shape.
			<br>
			The downside to this modifier is that it sometimes makes the shape appear "blocky".
		</td>
	</tr>
</table>
<br>
NOTES:
<ul>
	<li>
		Modifiers should ideally be added before or after the base shape name.  They can be added anywhere within the name of the desired shape, for example "arcflipvfliphcomp" and "arcfliphcompflipv"
		will produce the same result. They can also be added multiple times within the same shape, however each modifier will only activate if
		it is present an odd number of times in the final shape's name. So "arcflipvcompfliphcompcomp" will produce the same shape as the previous
		two examples since the "comp" modifier occurs an odd number of times (in this case, 3 times).
	</li>
	<li>
		Even abominable name-variants like "<strong>ar</strong>flipv<strong>c</strong>" and "<strong>elli</strong>trim<strong>pse</strong>" are permitted... for now.
		But please get into the habit of applying the modifiers correctly in case a
		future version of EllipseArc removes this loophole.
	</li>
</ul>


<div class="pagenav">
<a href="about_ellipsearc.htm"><strong>Prev:</strong> About EllipseArc</a>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<strong>Usage</strong>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<a href="ellipsearc_samples.htm"><strong>Next:</strong> EllipseArc Samples</a>
</div>

</body>



</html>